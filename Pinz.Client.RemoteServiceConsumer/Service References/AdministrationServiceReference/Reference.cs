//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDO", Namespace="http://schemas.datacontract.org/2004/07/Com.Pinz.Server.DataAccess.Model")]
    [System.SerializableAttribute()]
    public partial class UserDO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompanyAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPinzSuperAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMail {
            get {
                return this.EMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailField, value) != true)) {
                    this.EMailField = value;
                    this.RaisePropertyChanged("EMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FamilyName {
            get {
                return this.FamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyNameField, value) != true)) {
                    this.FamilyNameField = value;
                    this.RaisePropertyChanged("FamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompanyAdmin {
            get {
                return this.IsCompanyAdminField;
            }
            set {
                if ((this.IsCompanyAdminField.Equals(value) != true)) {
                    this.IsCompanyAdminField = value;
                    this.RaisePropertyChanged("IsCompanyAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPinzSuperAdmin {
            get {
                return this.IsPinzSuperAdminField;
            }
            set {
                if ((this.IsPinzSuperAdminField.Equals(value) != true)) {
                    this.IsPinzSuperAdminField = value;
                    this.RaisePropertyChanged("IsPinzSuperAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectDO", Namespace="http://schemas.datacontract.org/2004/07/Com.Pinz.Server.DataAccess.Model")]
    [System.SerializableAttribute()]
    public partial class ProjectDO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProjectUserDO", Namespace="http://schemas.datacontract.org/2004/07/Com.Pinz.Server.DataAccess.Model")]
    [System.SerializableAttribute()]
    public partial class ProjectUserDO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FamilyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompanyAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPinzSuperAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsProjectAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMail {
            get {
                return this.EMailField;
            }
            set {
                if ((object.ReferenceEquals(this.EMailField, value) != true)) {
                    this.EMailField = value;
                    this.RaisePropertyChanged("EMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FamilyName {
            get {
                return this.FamilyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FamilyNameField, value) != true)) {
                    this.FamilyNameField = value;
                    this.RaisePropertyChanged("FamilyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCompanyAdmin {
            get {
                return this.IsCompanyAdminField;
            }
            set {
                if ((this.IsCompanyAdminField.Equals(value) != true)) {
                    this.IsCompanyAdminField = value;
                    this.RaisePropertyChanged("IsCompanyAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPinzSuperAdmin {
            get {
                return this.IsPinzSuperAdminField;
            }
            set {
                if ((this.IsPinzSuperAdminField.Equals(value) != true)) {
                    this.IsPinzSuperAdminField = value;
                    this.RaisePropertyChanged("IsPinzSuperAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsProjectAdmin {
            get {
                return this.IsProjectAdminField;
            }
            set {
                if ((this.IsProjectAdminField.Equals(value) != true)) {
                    this.IsProjectAdminField = value;
                    this.RaisePropertyChanged("IsProjectAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDO", Namespace="http://schemas.datacontract.org/2004/07/Com.Pinz.Server.DataAccess.Model")]
    [System.SerializableAttribute()]
    public partial class CompanyDO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CompanyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CompanyId {
            get {
                return this.CompanyIdField;
            }
            set {
                if ((this.CompanyIdField.Equals(value) != true)) {
                    this.CompanyIdField = value;
                    this.RaisePropertyChanged("CompanyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://pinzonline.com/services", ConfigurationName="AdministrationServiceReference.IAdministrationService")]
    public interface IAdministrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CanCreateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/CanCreateProjectResponse")]
        bool CanCreateProject(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CanCreateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/CanCreateProjectResponse")]
        System.Threading.Tasks.Task<bool> CanCreateProjectAsync(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/InviteNewUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/InviteNewUserResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO InviteNewUser(string newUserEmail, System.Guid projectId, System.Guid invitingUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/InviteNewUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/InviteNewUserResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> InviteNewUserAsync(string newUserEmail, System.Guid projectId, System.Guid invitingUserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/SetProjectAdminFlag", ReplyAction="http://pinzonline.com/services/IAdministrationService/SetProjectAdminFlagResponse" +
            "")]
        void SetProjectAdminFlag(System.Guid userId, System.Guid projectId, bool isProjectAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/SetProjectAdminFlag", ReplyAction="http://pinzonline.com/services/IAdministrationService/SetProjectAdminFlagResponse" +
            "")]
        System.Threading.Tasks.Task SetProjectAdminFlagAsync(System.Guid userId, System.Guid projectId, bool isProjectAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ChangeUserPassword", ReplyAction="http://pinzonline.com/services/IAdministrationService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(System.Guid userId, string oldPassword, string newPassword, string newPassword2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ChangeUserPassword", ReplyAction="http://pinzonline.com/services/IAdministrationService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(System.Guid userId, string oldPassword, string newPassword, string newPassword2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAdminProjectsForUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAdminProjectsForUserRes" +
            "ponse")]
        System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> ReadAdminProjectsForUser(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAdminProjectsForUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAdminProjectsForUserRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO>> ReadAdminProjectsForUserAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllUsersByProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllUsersByProjectRespon" +
            "se")]
        System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> ReadAllUsersByProject(System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllUsersByProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllUsersByProjectRespon" +
            "se")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO>> ReadAllUsersByProjectAsync(System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllProjectUsersInProjec" +
            "t", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllProjectUsersInProjec" +
            "tResponse")]
        System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectUserDO> ReadAllProjectUsersInProject(System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllProjectUsersInProjec" +
            "t", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllProjectUsersInProjec" +
            "tResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectUserDO>> ReadAllProjectUsersInProjectAsync(System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadProjectsForCompanyId", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadProjectsForCompanyIdRes" +
            "ponse")]
        System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> ReadProjectsForCompanyId(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadProjectsForCompanyId", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadProjectsForCompanyIdRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO>> ReadProjectsForCompanyIdAsync(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllUsersForCompanyId", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllUsersForCompanyIdRes" +
            "ponse")]
        System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> ReadAllUsersForCompanyId(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadAllUsersForCompanyId", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadAllUsersForCompanyIdRes" +
            "ponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO>> ReadAllUsersForCompanyIdAsync(System.Guid companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadCompanyById", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadCompanyByIdResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.CompanyDO ReadCompanyById(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/ReadCompanyById", ReplyAction="http://pinzonline.com/services/IAdministrationService/ReadCompanyByIdResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.CompanyDO> ReadCompanyByIdAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/AddUserToProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/AddUserToProjectResponse")]
        void AddUserToProject(System.Guid userId, System.Guid projectId, bool isProjectAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/AddUserToProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/AddUserToProjectResponse")]
        System.Threading.Tasks.Task AddUserToProjectAsync(System.Guid userId, System.Guid projectId, bool isProjectAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/RemoveUserFromProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/RemoveUserFromProjectRespon" +
            "se")]
        void RemoveUserFromProject(System.Guid userId, System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/RemoveUserFromProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/RemoveUserFromProjectRespon" +
            "se")]
        System.Threading.Tasks.Task RemoveUserFromProjectAsync(System.Guid userId, System.Guid projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CreateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/CreateProjectResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO CreateProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CreateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/CreateProjectResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> CreateProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/UpdateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/UpdateProjectResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO UpdateProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/UpdateProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/UpdateProjectResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> UpdateProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/DeleteProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/DeleteProjectResponse")]
        void DeleteProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/DeleteProject", ReplyAction="http://pinzonline.com/services/IAdministrationService/DeleteProjectResponse")]
        System.Threading.Tasks.Task DeleteProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CreateUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/CreateUserResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO CreateUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/CreateUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/CreateUserResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> CreateUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/UpdateUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/UpdateUserResponse")]
        Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO UpdateUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/UpdateUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/UpdateUserResponse")]
        System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> UpdateUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/DeleteUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/DeleteUserResponse")]
        void DeleteUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pinzonline.com/services/IAdministrationService/DeleteUser", ReplyAction="http://pinzonline.com/services/IAdministrationService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdministrationServiceChannel : Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.IAdministrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdministrationServiceClient : System.ServiceModel.ClientBase<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.IAdministrationService>, Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.IAdministrationService {
        
        public AdministrationServiceClient() {
        }
        
        public AdministrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdministrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdministrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CanCreateProject(System.Guid companyId) {
            return base.Channel.CanCreateProject(companyId);
        }
        
        public System.Threading.Tasks.Task<bool> CanCreateProjectAsync(System.Guid companyId) {
            return base.Channel.CanCreateProjectAsync(companyId);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO InviteNewUser(string newUserEmail, System.Guid projectId, System.Guid invitingUserId) {
            return base.Channel.InviteNewUser(newUserEmail, projectId, invitingUserId);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> InviteNewUserAsync(string newUserEmail, System.Guid projectId, System.Guid invitingUserId) {
            return base.Channel.InviteNewUserAsync(newUserEmail, projectId, invitingUserId);
        }
        
        public void SetProjectAdminFlag(System.Guid userId, System.Guid projectId, bool isProjectAdmin) {
            base.Channel.SetProjectAdminFlag(userId, projectId, isProjectAdmin);
        }
        
        public System.Threading.Tasks.Task SetProjectAdminFlagAsync(System.Guid userId, System.Guid projectId, bool isProjectAdmin) {
            return base.Channel.SetProjectAdminFlagAsync(userId, projectId, isProjectAdmin);
        }
        
        public bool ChangeUserPassword(System.Guid userId, string oldPassword, string newPassword, string newPassword2) {
            return base.Channel.ChangeUserPassword(userId, oldPassword, newPassword, newPassword2);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(System.Guid userId, string oldPassword, string newPassword, string newPassword2) {
            return base.Channel.ChangeUserPasswordAsync(userId, oldPassword, newPassword, newPassword2);
        }
        
        public System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> ReadAdminProjectsForUser(System.Guid userId) {
            return base.Channel.ReadAdminProjectsForUser(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO>> ReadAdminProjectsForUserAsync(System.Guid userId) {
            return base.Channel.ReadAdminProjectsForUserAsync(userId);
        }
        
        public System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> ReadAllUsersByProject(System.Guid projectId) {
            return base.Channel.ReadAllUsersByProject(projectId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO>> ReadAllUsersByProjectAsync(System.Guid projectId) {
            return base.Channel.ReadAllUsersByProjectAsync(projectId);
        }
        
        public System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectUserDO> ReadAllProjectUsersInProject(System.Guid projectId) {
            return base.Channel.ReadAllProjectUsersInProject(projectId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectUserDO>> ReadAllProjectUsersInProjectAsync(System.Guid projectId) {
            return base.Channel.ReadAllProjectUsersInProjectAsync(projectId);
        }
        
        public System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> ReadProjectsForCompanyId(System.Guid companyId) {
            return base.Channel.ReadProjectsForCompanyId(companyId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO>> ReadProjectsForCompanyIdAsync(System.Guid companyId) {
            return base.Channel.ReadProjectsForCompanyIdAsync(companyId);
        }
        
        public System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> ReadAllUsersForCompanyId(System.Guid companyId) {
            return base.Channel.ReadAllUsersForCompanyId(companyId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO>> ReadAllUsersForCompanyIdAsync(System.Guid companyId) {
            return base.Channel.ReadAllUsersForCompanyIdAsync(companyId);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.CompanyDO ReadCompanyById(System.Guid id) {
            return base.Channel.ReadCompanyById(id);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.CompanyDO> ReadCompanyByIdAsync(System.Guid id) {
            return base.Channel.ReadCompanyByIdAsync(id);
        }
        
        public void AddUserToProject(System.Guid userId, System.Guid projectId, bool isProjectAdmin) {
            base.Channel.AddUserToProject(userId, projectId, isProjectAdmin);
        }
        
        public System.Threading.Tasks.Task AddUserToProjectAsync(System.Guid userId, System.Guid projectId, bool isProjectAdmin) {
            return base.Channel.AddUserToProjectAsync(userId, projectId, isProjectAdmin);
        }
        
        public void RemoveUserFromProject(System.Guid userId, System.Guid projectId) {
            base.Channel.RemoveUserFromProject(userId, projectId);
        }
        
        public System.Threading.Tasks.Task RemoveUserFromProjectAsync(System.Guid userId, System.Guid projectId) {
            return base.Channel.RemoveUserFromProjectAsync(userId, projectId);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO CreateProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            return base.Channel.CreateProject(project);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> CreateProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            return base.Channel.CreateProjectAsync(project);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO UpdateProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            return base.Channel.UpdateProject(project);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO> UpdateProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            return base.Channel.UpdateProjectAsync(project);
        }
        
        public void DeleteProject(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            base.Channel.DeleteProject(project);
        }
        
        public System.Threading.Tasks.Task DeleteProjectAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.ProjectDO project) {
            return base.Channel.DeleteProjectAsync(project);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO CreateUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            return base.Channel.CreateUser(user);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> CreateUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            return base.Channel.CreateUserAsync(user);
        }
        
        public Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO UpdateUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO> UpdateUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public void DeleteUser(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(Com.Pinz.Client.RemoteServiceConsumer.AdministrationServiceReference.UserDO user) {
            return base.Channel.DeleteUserAsync(user);
        }
    }
}
